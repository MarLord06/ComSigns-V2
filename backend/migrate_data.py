#!/usr/bin/env python3
"""
Script para migrar datos est√°ticos a Supabase
"""

import asyncio
import sys
import os

# Agregar el directorio del proyecto al path
sys.path.append(os.path.dirname(os.path.abspath(__file__)))

from app.core.supabase import supabase_service

async def migrate_tutorial_lessons():
    """
    Migrar lecciones del tutorial a Supabase
    """
    print("üìö Migrando lecciones del tutorial...")
    
    lessons_data = [
        (1, 'A', 'Letra A', 'easy', 'Aprende la se√±a de la letra A', '["Pu√±o cerrado con pulgar al lado", "Mant√©n el pu√±o bien cerrado", "El pulgar debe estar visible al lado"]'),
        (2, 'B', 'Letra B', 'easy', 'Aprende la se√±a de la letra B', '["Mano abierta, dedos juntos, pulgar doblado", "Dedos bien rectos", "Pulgar pegado a la palma"]'),
        (3, 'C', 'Letra C', 'easy', 'Aprende la se√±a de la letra C', '["Mano curvada como una C", "Forma una C con toda la mano", "Mant√©n la curvatura uniforme"]'),
        # ... agregar m√°s lecciones seg√∫n necesidad
    ]
    
    if not supabase_service.is_connected():
        print("‚ùå Supabase no est√° conectado. Verifica la configuraci√≥n.")
        return False
    
    try:
        for lesson_data in lessons_data:
            lesson_number, letter, name, difficulty, description, tips = lesson_data
            
            # Verificar si ya existe
            existing = await supabase_service.get_tutorial_lesson_by_number(lesson_number)
            
            if not existing:
                # Insertar nueva lecci√≥n
                result = supabase_service.supabase.table("tutorial_lessons").insert({
                    "lesson_number": lesson_number,
                    "letter": letter,
                    "name": name,
                    "difficulty": difficulty,
                    "description": description,
                    "tips": tips,
                    "estimated_time_minutes": 3
                }).execute()
                
                if result.data:
                    print(f"‚úÖ Lecci√≥n {lesson_number} ({letter}) migrada correctamente")
                else:
                    print(f"‚ùå Error migrando lecci√≥n {lesson_number}")
            else:
                print(f"‚ö†Ô∏è  Lecci√≥n {lesson_number} ({letter}) ya existe, omitiendo...")
    
        print("‚úÖ Migraci√≥n de lecciones completada")
        return True
        
    except Exception as e:
        print(f"‚ùå Error durante la migraci√≥n de lecciones: {str(e)}")
        return False

async def migrate_practice_challenges():
    """
    Migrar desaf√≠os de pr√°ctica a Supabase
    """
    print("üéÆ Migrando desaf√≠os de pr√°ctica...")
    
    challenges_data = [
        (1, 'recognition', 'A', None, 'Reconoce la letra A', 'Identifica la letra A', 'easy', 10, 5),
        (2, 'recognition', 'B', None, 'Reconoce la letra B', 'Identifica la letra B', 'easy', 10, 5),
        (3, 'formation', 'D', None, 'Forma la letra D', 'Forma la se√±a de la letra D', 'medium', 15, 8),
        (4, 'sequence', None, '["H", "O", "L", "A"]', 'Palabra HOLA', 'Forma la palabra HOLA', 'hard', 50, 15),
        # ... agregar m√°s desaf√≠os seg√∫n necesidad
    ]
    
    if not supabase_service.is_connected():
        print("‚ùå Supabase no est√° conectado. Verifica la configuraci√≥n.")
        return False
    
    try:
        for challenge_data in challenges_data:
            challenge_number, type_, letter, letters, name, description, difficulty, points, time_limit = challenge_data
            
            # Verificar si ya existe
            existing = supabase_service.supabase.table("practice_challenges").select("*").eq("challenge_number", challenge_number).execute()
            
            if not existing.data:
                # Insertar nuevo desaf√≠o
                result = supabase_service.supabase.table("practice_challenges").insert({
                    "challenge_number": challenge_number,
                    "type": type_,
                    "letter": letter,
                    "letters": letters,
                    "name": name,
                    "description": description,
                    "difficulty": difficulty,
                    "points": points,
                    "time_limit_seconds": time_limit
                }).execute()
                
                if result.data:
                    print(f"‚úÖ Desaf√≠o {challenge_number} ({name}) migrado correctamente")
                else:
                    print(f"‚ùå Error migrando desaf√≠o {challenge_number}")
            else:
                print(f"‚ö†Ô∏è  Desaf√≠o {challenge_number} ({name}) ya existe, omitiendo...")
    
        print("‚úÖ Migraci√≥n de desaf√≠os completada")
        return True
        
    except Exception as e:
        print(f"‚ùå Error durante la migraci√≥n de desaf√≠os: {str(e)}")
        return False

async def verify_migration():
    """
    Verificar que la migraci√≥n se realiz√≥ correctamente
    """
    print("üîç Verificando migraci√≥n...")
    
    if not supabase_service.is_connected():
        print("‚ùå Supabase no est√° conectado.")
        return False
    
    try:
        # Verificar lecciones
        lessons = await supabase_service.get_tutorial_lessons()
        print(f"üìö Lecciones en Supabase: {len(lessons)}")
        
        # Verificar desaf√≠os
        challenges = await supabase_service.get_practice_challenges()
        print(f"üéÆ Desaf√≠os en Supabase: {len(challenges)}")
        
        print("‚úÖ Verificaci√≥n completada")
        return True
        
    except Exception as e:
        print(f"‚ùå Error durante la verificaci√≥n: {str(e)}")
        return False

async def main():
    """
    Funci√≥n principal de migraci√≥n
    """
    print("üöÄ Iniciando migraci√≥n de datos a Supabase...")
    print("=" * 50)
    
    # Verificar conexi√≥n a Supabase
    if not supabase_service.is_connected():
        print("‚ùå Error: Supabase no est√° configurado o no est√° disponible.")
        print("   Verifica las variables de entorno SUPABASE_URL y SUPABASE_ANON_KEY")
        return
    
    print("‚úÖ Conexi√≥n a Supabase verificada")
    
    # Migrar datos
    success = True
    
    success &= await migrate_tutorial_lessons()
    success &= await migrate_practice_challenges()
    
    if success:
        await verify_migration()
        print("\nüéâ Migraci√≥n completada exitosamente!")
        print("   Los datos est√°ticos ahora est√°n almacenados en Supabase.")
        print("   La API usar√° autom√°ticamente los datos de Supabase cuando est√© disponible.")
    else:
        print("\n‚ùå La migraci√≥n fall√≥ parcialmente.")
        print("   Revisa los errores anteriores y ejecuta el script nuevamente.")

if __name__ == "__main__":
    asyncio.run(main())
