{
  "version": 3,
  "sources": [],
  "sections": [
    {"offset": {"line": 7, "column": 0}, "map": {"version":3,"sources":["file:///Users/marloveper__/Documents/proyectos/ccc/ComSigns-DEV/ComSigns-V2/frontend/lib/supabase.ts"],"sourcesContent":["import { createClient } from '@supabase/supabase-js'\n\nconst supabaseUrl = process.env.NEXT_PUBLIC_SUPABASE_URL\nconst supabaseAnonKey = process.env.NEXT_PUBLIC_SUPABASE_ANON_KEY\n\nif (!supabaseUrl) {\n  throw new Error('Missing env.NEXT_PUBLIC_SUPABASE_URL')\n}\nif (!supabaseAnonKey) {\n  throw new Error('Missing env.NEXT_PUBLIC_SUPABASE_ANON_KEY')\n}\n\nexport const supabase = createClient(supabaseUrl, supabaseAnonKey, {\n  auth: {\n    autoRefreshToken: true,\n    persistSession: true,\n    detectSessionInUrl: true\n  }\n})\n\n// Tipos para el usuario extendido\nexport interface UserProfile {\n  id: string\n  username: string\n  full_name: string\n  experience_level: 'beginner' | 'intermediate' | 'advanced'\n  created_at: string\n  avatar_url?: string | null\n  total_points: number\n  current_level: number\n  games_played: number\n  accuracy_percentage: number\n  longest_streak: number\n  current_streak: number\n  is_active: boolean\n  updated_at: string\n}\n\n// Tipos para estadísticas del usuario\nexport interface UserStats {\n  total_sessions: number\n  total_practice_time: number\n  letters_completed: string[]\n  average_accuracy: number\n  current_streak: number\n  best_streak: number\n  total_points: number\n  level: number\n}\n"],"names":[],"mappings":";;;AAEoB;AAFpB;;AAEA,MAAM;AACN,MAAM;AAEN,uCAAkB;;AAElB;AACA,uCAAsB;;AAEtB;AAEO,MAAM,WAAW,CAAA,GAAA,0LAAA,CAAA,eAAY,AAAD,EAAE,aAAa,iBAAiB;IACjE,MAAM;QACJ,kBAAkB;QAClB,gBAAgB;QAChB,oBAAoB;IACtB;AACF","debugId":null}},
    {"offset": {"line": 37, "column": 0}, "map": {"version":3,"sources":["file:///Users/marloveper__/Documents/proyectos/ccc/ComSigns-DEV/ComSigns-V2/frontend/lib/auth-context.tsx"],"sourcesContent":["'use client'\n\nimport React, { createContext, useContext, useEffect, useState } from 'react'\nimport { User, Session, AuthError } from '@supabase/supabase-js'\nimport { supabase, UserProfile, UserStats } from '@/lib/supabase'\n\ninterface AuthContextType {\n  user: User | null\n  session: Session | null\n  profile: UserProfile | null\n  stats: UserStats | null\n  loading: boolean\n  signIn: (email: string, password: string) => Promise<{ error: AuthError | null }>\n  signUp: (email: string, password: string, username: string, fullName: string, experienceLevel: string) => Promise<{ error: AuthError | null }>\n  signOut: () => Promise<void>\n  updateProfile: (updates: Partial<UserProfile>) => Promise<{ error: Error | null }>\n  refreshStats: () => Promise<void>\n  isNewUser: boolean\n  completeTutorial: () => void\n}\n\nconst AuthContext = createContext<AuthContextType | undefined>(undefined)\n\nexport const useAuth = () => {\n  const context = useContext(AuthContext)\n  if (context === undefined) {\n    throw new Error('useAuth must be used within an AuthProvider')\n  }\n  return context\n}\n\nexport const AuthProvider: React.FC<{ children: React.ReactNode }> = ({ children }) => {\n  const [user, setUser] = useState<User | null>(null)\n  const [session, setSession] = useState<Session | null>(null)\n  const [profile, setProfile] = useState<UserProfile | null>(null)\n  const [stats, setStats] = useState<UserStats | null>(null)\n  const [loading, setLoading] = useState(true)\n  // Un usuario es nuevo si no tiene estadísticas o tiene 0 sesiones\n  const [isNewUser, setIsNewUser] = useState(false)\n\n  useEffect(() => {\n    console.log('Initializing auth...')\n    \n    // Obtener sesión inicial\n    const getSession = async () => {\n      const { data: { session }, error } = await supabase.auth.getSession()\n      \n      if (error) {\n        console.error('Error getting session:', error)\n        setLoading(false)\n        return\n      }\n\n      console.log('Initial session:', session ? 'Found' : 'Not found')\n      setSession(session)\n      setUser(session?.user ?? null)\n      \n      if (session?.user) {\n        console.log('User found, loading profile and stats...')\n        await loadUserProfile(session.user.id)\n        await loadUserStats(session.user.id)\n      }\n      \n      setLoading(false)\n      console.log('Auth initialization complete')\n    }\n\n    getSession()\n\n    // Escuchar cambios de autenticación\n    const {\n      data: { subscription },\n    } = supabase.auth.onAuthStateChange(async (event, session) => {\n      console.log('Auth state changed:', event)\n      \n      setSession(session)\n      setUser(session?.user ?? null)\n      \n      if (session?.user) {\n        console.log('Loading user data...')\n  loadUserProfile(session.user.id) // Quitar await para evitar bloqueos\n  loadUserStats(session.user.id)   // Quitar await para evitar bloqueos\n      } else {\n        setProfile(null)\n        setStats(null)\n        setIsNewUser(false)\n      }\n      setLoading(false)\n    })\n\n    return () => {\n      subscription.unsubscribe()\n    }\n  }, []) // Dependencias vacías para ejecutar solo una vez\n\n  const loadUserProfile = async (userId: string) => {\n    try {\n      console.log('Loading profile for user:', userId)\n      \n      const { data, error } = await supabase\n        .from('user_profiles')\n        .select('*')\n        .eq('id', userId)\n        .maybeSingle()\n\n      if (error) {\n        console.error('Error loading profile:', error)\n        // Si hay error grave, limpiar sesión\n        if (error.code === '42P01' || error.message.includes('does not exist')) {\n          console.log('Forcing logout due to profile error')\n          await supabase.auth.signOut()\n        }\n        return\n      }\n\n      if (!data) {\n        console.log('No profile found for user, user might have been deleted')\n        // Usuario eliminado, limpiar sesión\n        await supabase.auth.signOut()\n        return\n      }\n\n      console.log('Profile data:', data)\n      setProfile(data)\n    } catch (error) {\n      console.error('Error loading profile:', error)\n      // En caso de error, limpiar sesión para evitar loops\n      await supabase.auth.signOut()\n    }\n  }\n\n  const loadUserStats = async (userId: string) => {\n    try {\n      console.log('Loading stats for user:', userId)\n      \n      // Obtener estadísticas de game_attempts (nueva estructura simplificada)\n      const { data: attemptsData, error } = await supabase\n        .from('game_attempts')\n        .select('points_earned, is_correct, time_taken_seconds')\n        .eq('user_id', userId)\n      \n      if (error) {\n        console.log('No stats yet, using defaults:', error)\n        // Establecer stats por defecto\n        setStats({\n          total_sessions: 0,\n          total_practice_time: 0,\n          letters_completed: [],\n          average_accuracy: 0,\n          current_streak: 0,\n          best_streak: 0,\n          total_points: 0,\n          level: 1\n        })\n        setIsNewUser(true)\n        return\n      }\n\n      console.log('Attempts data:', attemptsData)\n\n      // Calcular estadísticas o usar datos mock\n  if (attemptsData && attemptsData.length > 0) {\n        const correctAttempts = attemptsData.filter(a => a.is_correct)\n        const stats = {\n          total_sessions: attemptsData.length,\n          total_practice_time: attemptsData.reduce((sum, result) => sum + (result.time_taken_seconds || 0), 0),\n          letters_completed: [],\n          average_accuracy: correctAttempts.length / attemptsData.length,\n          current_streak: 0,\n          best_streak: 0,\n          total_points: attemptsData.reduce((sum, result) => sum + (result.points_earned || 0), 0),\n          level: Math.floor(attemptsData.reduce((sum, result) => sum + (result.points_earned || 0), 0) / 100) + 1\n        }\n  setStats(stats)\n  setIsNewUser(stats.total_sessions === 0)\n  console.log('Stats loaded successfully:', stats)\n      } else {\n        // Usuario nuevo sin estadísticas\n        const defaultStats = {\n          total_sessions: 0,\n          total_practice_time: 0,\n          letters_completed: [],\n          average_accuracy: 0,\n          current_streak: 0,\n          best_streak: 0,\n          total_points: 0,\n          level: 1\n        }\n        setStats(defaultStats)\n        setIsNewUser(true)\n        console.log('Using default stats for new user')\n      }\n    } catch (error) {\n      console.error('Error loading stats:', error)\n      // Datos por defecto para usuarios nuevos\n      setStats({\n        total_sessions: 0,\n        total_practice_time: 0,\n        letters_completed: [],\n        average_accuracy: 0,\n        current_streak: 0,\n        best_streak: 0,\n        total_points: 0,\n        level: 1\n      })\n    }\n  }\n\n  const signIn = async (email: string, password: string) => {\n    try {\n      console.log('Attempting login for:', email)\n      \n      const { data, error } = await supabase.auth.signInWithPassword({\n        email,\n        password,\n      })\n      \n      if (error) {\n        console.error('Login error:', error)\n        \n        // Manejar errores específicos\n        if (error.message.includes('Email not confirmed')) {\n          console.error('Email needs confirmation')\n          return { error: { ...error, message: 'Confirma tu email antes de iniciar sesión' } }\n        }\n        \n        if (error.message.includes('Invalid login credentials')) {\n          console.error('Invalid credentials')\n          return { error: { ...error, message: 'Email o contraseña incorrectos' } }\n        }\n        \n        return { error }\n      }\n      \n      console.log('Login successful:', data.user?.email)\n      return { error: null }\n    } catch (err) {\n      console.error('Unexpected login error:', err)\n      return { error: err as any }\n    }\n  }\n\n  const signUp = async (\n    email: string, \n    password: string, \n    username: string, \n    fullName: string, \n    experienceLevel: string\n  ) => {\n    try {\n      const { data, error } = await supabase.auth.signUp({\n        email,\n        password,\n        options: {\n          data: {\n            username,\n            full_name: fullName,\n            experience_level: experienceLevel,\n          },\n        },\n      })\n\n      if (error) {\n        console.error('Auth signup error:', error)\n        return { error }\n      }\n\n      if (!data.user) {\n        console.error('No user data returned')\n        return { error: new Error('No user data returned') as any }\n      }\n\n      // Crear perfil en la tabla user_profiles\n      const { error: profileError } = await supabase\n        .from('user_profiles')\n        .insert({\n          id: data.user.id,\n          username,\n          full_name: fullName,\n          experience_level: experienceLevel,\n        })\n\n      if (profileError) {\n        console.error('Error creating profile:', profileError)\n        // Si es un error de tabla no existe, dar un mensaje más claro\n        if (profileError.code === '42P01') {\n          console.error('La tabla profiles no existe. Ejecuta el schema de Supabase.')\n          return { error: new Error('Database not configured. Please contact support.') as any }\n        }\n        return { error: profileError }\n      }\n\n      console.log('User and profile created successfully')\n      return { error: null }\n    } catch (err) {\n      console.error('Unexpected signup error:', err)\n      return { error: err as any }\n    }\n  }\n\n  const signOut = async () => {\n    const { error } = await supabase.auth.signOut()\n    if (error) {\n      console.error('Error signing out:', error)\n    }\n  }\n\n  const updateProfile = async (updates: Partial<UserProfile>) => {\n    if (!user) return { error: new Error('No user logged in') }\n\n    try {\n      const { error } = await supabase\n        .from('user_profiles')\n        .update(updates)\n        .eq('id', user.id)\n\n      if (!error) {\n        setProfile(prev => prev ? { ...prev, ...updates } : null)\n      }\n\n      return { error }\n    } catch (error) {\n      return { error: error as Error }\n    }\n  }\n\n  const refreshStats = async () => {\n    if (user) {\n      await loadUserStats(user.id)\n    }\n  }\n\n  // Marcar tutorial como completado: simplemente refresca stats para que isNewUser se actualice\n  const completeTutorial = async () => {\n    if (user) {\n      await refreshStats()\n    }\n  }\n\n  const value = {\n    user,\n    session,\n    profile,\n    stats,\n    loading,\n    signIn,\n    signUp,\n    signOut,\n    updateProfile,\n    refreshStats,\n    isNewUser,\n    completeTutorial,\n  }\n\n  return <AuthContext.Provider value={value}>{children}</AuthContext.Provider>\n}\n"],"names":[],"mappings":";;;;;AAEA;AAEA;;;AAJA;;;AAqBA,MAAM,4BAAc,CAAA,GAAA,6JAAA,CAAA,gBAAa,AAAD,EAA+B;AAExD,MAAM,UAAU;;IACrB,MAAM,UAAU,CAAA,GAAA,6JAAA,CAAA,aAAU,AAAD,EAAE;IAC3B,IAAI,YAAY,WAAW;QACzB,MAAM,IAAI,MAAM;IAClB;IACA,OAAO;AACT;GANa;AAQN,MAAM,eAAwD,CAAC,EAAE,QAAQ,EAAE;;IAChF,MAAM,CAAC,MAAM,QAAQ,GAAG,CAAA,GAAA,6JAAA,CAAA,WAAQ,AAAD,EAAe;IAC9C,MAAM,CAAC,SAAS,WAAW,GAAG,CAAA,GAAA,6JAAA,CAAA,WAAQ,AAAD,EAAkB;IACvD,MAAM,CAAC,SAAS,WAAW,GAAG,CAAA,GAAA,6JAAA,CAAA,WAAQ,AAAD,EAAsB;IAC3D,MAAM,CAAC,OAAO,SAAS,GAAG,CAAA,GAAA,6JAAA,CAAA,WAAQ,AAAD,EAAoB;IACrD,MAAM,CAAC,SAAS,WAAW,GAAG,CAAA,GAAA,6JAAA,CAAA,WAAQ,AAAD,EAAE;IACvC,kEAAkE;IAClE,MAAM,CAAC,WAAW,aAAa,GAAG,CAAA,GAAA,6JAAA,CAAA,WAAQ,AAAD,EAAE;IAE3C,CAAA,GAAA,6JAAA,CAAA,YAAS,AAAD;kCAAE;YACR,QAAQ,GAAG,CAAC;YAEZ,yBAAyB;YACzB,MAAM;qDAAa;oBACjB,MAAM,EAAE,MAAM,EAAE,OAAO,EAAE,EAAE,KAAK,EAAE,GAAG,MAAM,kHAAA,CAAA,WAAQ,CAAC,IAAI,CAAC,UAAU;oBAEnE,IAAI,OAAO;wBACT,QAAQ,KAAK,CAAC,0BAA0B;wBACxC,WAAW;wBACX;oBACF;oBAEA,QAAQ,GAAG,CAAC,oBAAoB,UAAU,UAAU;oBACpD,WAAW;oBACX,QAAQ,SAAS,QAAQ;oBAEzB,IAAI,SAAS,MAAM;wBACjB,QAAQ,GAAG,CAAC;wBACZ,MAAM,gBAAgB,QAAQ,IAAI,CAAC,EAAE;wBACrC,MAAM,cAAc,QAAQ,IAAI,CAAC,EAAE;oBACrC;oBAEA,WAAW;oBACX,QAAQ,GAAG,CAAC;gBACd;;YAEA;YAEA,oCAAoC;YACpC,MAAM,EACJ,MAAM,EAAE,YAAY,EAAE,EACvB,GAAG,kHAAA,CAAA,WAAQ,CAAC,IAAI,CAAC,iBAAiB;0CAAC,OAAO,OAAO;oBAChD,QAAQ,GAAG,CAAC,uBAAuB;oBAEnC,WAAW;oBACX,QAAQ,SAAS,QAAQ;oBAEzB,IAAI,SAAS,MAAM;wBACjB,QAAQ,GAAG,CAAC;wBAClB,gBAAgB,QAAQ,IAAI,CAAC,EAAE,EAAE,oCAAoC;;wBACrE,cAAc,QAAQ,IAAI,CAAC,EAAE,EAAI,oCAAoC;;oBACjE,OAAO;wBACL,WAAW;wBACX,SAAS;wBACT,aAAa;oBACf;oBACA,WAAW;gBACb;;YAEA;0CAAO;oBACL,aAAa,WAAW;gBAC1B;;QACF;iCAAG,EAAE,EAAE,iDAAiD;;IAExD,MAAM,kBAAkB,OAAO;QAC7B,IAAI;YACF,QAAQ,GAAG,CAAC,6BAA6B;YAEzC,MAAM,EAAE,IAAI,EAAE,KAAK,EAAE,GAAG,MAAM,kHAAA,CAAA,WAAQ,CACnC,IAAI,CAAC,iBACL,MAAM,CAAC,KACP,EAAE,CAAC,MAAM,QACT,WAAW;YAEd,IAAI,OAAO;gBACT,QAAQ,KAAK,CAAC,0BAA0B;gBACxC,qCAAqC;gBACrC,IAAI,MAAM,IAAI,KAAK,WAAW,MAAM,OAAO,CAAC,QAAQ,CAAC,mBAAmB;oBACtE,QAAQ,GAAG,CAAC;oBACZ,MAAM,kHAAA,CAAA,WAAQ,CAAC,IAAI,CAAC,OAAO;gBAC7B;gBACA;YACF;YAEA,IAAI,CAAC,MAAM;gBACT,QAAQ,GAAG,CAAC;gBACZ,oCAAoC;gBACpC,MAAM,kHAAA,CAAA,WAAQ,CAAC,IAAI,CAAC,OAAO;gBAC3B;YACF;YAEA,QAAQ,GAAG,CAAC,iBAAiB;YAC7B,WAAW;QACb,EAAE,OAAO,OAAO;YACd,QAAQ,KAAK,CAAC,0BAA0B;YACxC,qDAAqD;YACrD,MAAM,kHAAA,CAAA,WAAQ,CAAC,IAAI,CAAC,OAAO;QAC7B;IACF;IAEA,MAAM,gBAAgB,OAAO;QAC3B,IAAI;YACF,QAAQ,GAAG,CAAC,2BAA2B;YAEvC,wEAAwE;YACxE,MAAM,EAAE,MAAM,YAAY,EAAE,KAAK,EAAE,GAAG,MAAM,kHAAA,CAAA,WAAQ,CACjD,IAAI,CAAC,iBACL,MAAM,CAAC,iDACP,EAAE,CAAC,WAAW;YAEjB,IAAI,OAAO;gBACT,QAAQ,GAAG,CAAC,iCAAiC;gBAC7C,+BAA+B;gBAC/B,SAAS;oBACP,gBAAgB;oBAChB,qBAAqB;oBACrB,mBAAmB,EAAE;oBACrB,kBAAkB;oBAClB,gBAAgB;oBAChB,aAAa;oBACb,cAAc;oBACd,OAAO;gBACT;gBACA,aAAa;gBACb;YACF;YAEA,QAAQ,GAAG,CAAC,kBAAkB;YAE9B,0CAA0C;YAC9C,IAAI,gBAAgB,aAAa,MAAM,GAAG,GAAG;gBACvC,MAAM,kBAAkB,aAAa,MAAM,CAAC,CAAA,IAAK,EAAE,UAAU;gBAC7D,MAAM,QAAQ;oBACZ,gBAAgB,aAAa,MAAM;oBACnC,qBAAqB,aAAa,MAAM,CAAC,CAAC,KAAK,SAAW,MAAM,CAAC,OAAO,kBAAkB,IAAI,CAAC,GAAG;oBAClG,mBAAmB,EAAE;oBACrB,kBAAkB,gBAAgB,MAAM,GAAG,aAAa,MAAM;oBAC9D,gBAAgB;oBAChB,aAAa;oBACb,cAAc,aAAa,MAAM,CAAC,CAAC,KAAK,SAAW,MAAM,CAAC,OAAO,aAAa,IAAI,CAAC,GAAG;oBACtF,OAAO,KAAK,KAAK,CAAC,aAAa,MAAM,CAAC,CAAC,KAAK,SAAW,MAAM,CAAC,OAAO,aAAa,IAAI,CAAC,GAAG,KAAK,OAAO;gBACxG;gBACN,SAAS;gBACT,aAAa,MAAM,cAAc,KAAK;gBACtC,QAAQ,GAAG,CAAC,8BAA8B;YACtC,OAAO;gBACL,iCAAiC;gBACjC,MAAM,eAAe;oBACnB,gBAAgB;oBAChB,qBAAqB;oBACrB,mBAAmB,EAAE;oBACrB,kBAAkB;oBAClB,gBAAgB;oBAChB,aAAa;oBACb,cAAc;oBACd,OAAO;gBACT;gBACA,SAAS;gBACT,aAAa;gBACb,QAAQ,GAAG,CAAC;YACd;QACF,EAAE,OAAO,OAAO;YACd,QAAQ,KAAK,CAAC,wBAAwB;YACtC,yCAAyC;YACzC,SAAS;gBACP,gBAAgB;gBAChB,qBAAqB;gBACrB,mBAAmB,EAAE;gBACrB,kBAAkB;gBAClB,gBAAgB;gBAChB,aAAa;gBACb,cAAc;gBACd,OAAO;YACT;QACF;IACF;IAEA,MAAM,SAAS,OAAO,OAAe;QACnC,IAAI;YACF,QAAQ,GAAG,CAAC,yBAAyB;YAErC,MAAM,EAAE,IAAI,EAAE,KAAK,EAAE,GAAG,MAAM,kHAAA,CAAA,WAAQ,CAAC,IAAI,CAAC,kBAAkB,CAAC;gBAC7D;gBACA;YACF;YAEA,IAAI,OAAO;gBACT,QAAQ,KAAK,CAAC,gBAAgB;gBAE9B,8BAA8B;gBAC9B,IAAI,MAAM,OAAO,CAAC,QAAQ,CAAC,wBAAwB;oBACjD,QAAQ,KAAK,CAAC;oBACd,OAAO;wBAAE,OAAO;4BAAE,GAAG,KAAK;4BAAE,SAAS;wBAA4C;oBAAE;gBACrF;gBAEA,IAAI,MAAM,OAAO,CAAC,QAAQ,CAAC,8BAA8B;oBACvD,QAAQ,KAAK,CAAC;oBACd,OAAO;wBAAE,OAAO;4BAAE,GAAG,KAAK;4BAAE,SAAS;wBAAiC;oBAAE;gBAC1E;gBAEA,OAAO;oBAAE;gBAAM;YACjB;YAEA,QAAQ,GAAG,CAAC,qBAAqB,KAAK,IAAI,EAAE;YAC5C,OAAO;gBAAE,OAAO;YAAK;QACvB,EAAE,OAAO,KAAK;YACZ,QAAQ,KAAK,CAAC,2BAA2B;YACzC,OAAO;gBAAE,OAAO;YAAW;QAC7B;IACF;IAEA,MAAM,SAAS,OACb,OACA,UACA,UACA,UACA;QAEA,IAAI;YACF,MAAM,EAAE,IAAI,EAAE,KAAK,EAAE,GAAG,MAAM,kHAAA,CAAA,WAAQ,CAAC,IAAI,CAAC,MAAM,CAAC;gBACjD;gBACA;gBACA,SAAS;oBACP,MAAM;wBACJ;wBACA,WAAW;wBACX,kBAAkB;oBACpB;gBACF;YACF;YAEA,IAAI,OAAO;gBACT,QAAQ,KAAK,CAAC,sBAAsB;gBACpC,OAAO;oBAAE;gBAAM;YACjB;YAEA,IAAI,CAAC,KAAK,IAAI,EAAE;gBACd,QAAQ,KAAK,CAAC;gBACd,OAAO;oBAAE,OAAO,IAAI,MAAM;gBAAgC;YAC5D;YAEA,yCAAyC;YACzC,MAAM,EAAE,OAAO,YAAY,EAAE,GAAG,MAAM,kHAAA,CAAA,WAAQ,CAC3C,IAAI,CAAC,iBACL,MAAM,CAAC;gBACN,IAAI,KAAK,IAAI,CAAC,EAAE;gBAChB;gBACA,WAAW;gBACX,kBAAkB;YACpB;YAEF,IAAI,cAAc;gBAChB,QAAQ,KAAK,CAAC,2BAA2B;gBACzC,8DAA8D;gBAC9D,IAAI,aAAa,IAAI,KAAK,SAAS;oBACjC,QAAQ,KAAK,CAAC;oBACd,OAAO;wBAAE,OAAO,IAAI,MAAM;oBAA2D;gBACvF;gBACA,OAAO;oBAAE,OAAO;gBAAa;YAC/B;YAEA,QAAQ,GAAG,CAAC;YACZ,OAAO;gBAAE,OAAO;YAAK;QACvB,EAAE,OAAO,KAAK;YACZ,QAAQ,KAAK,CAAC,4BAA4B;YAC1C,OAAO;gBAAE,OAAO;YAAW;QAC7B;IACF;IAEA,MAAM,UAAU;QACd,MAAM,EAAE,KAAK,EAAE,GAAG,MAAM,kHAAA,CAAA,WAAQ,CAAC,IAAI,CAAC,OAAO;QAC7C,IAAI,OAAO;YACT,QAAQ,KAAK,CAAC,sBAAsB;QACtC;IACF;IAEA,MAAM,gBAAgB,OAAO;QAC3B,IAAI,CAAC,MAAM,OAAO;YAAE,OAAO,IAAI,MAAM;QAAqB;QAE1D,IAAI;YACF,MAAM,EAAE,KAAK,EAAE,GAAG,MAAM,kHAAA,CAAA,WAAQ,CAC7B,IAAI,CAAC,iBACL,MAAM,CAAC,SACP,EAAE,CAAC,MAAM,KAAK,EAAE;YAEnB,IAAI,CAAC,OAAO;gBACV,WAAW,CAAA,OAAQ,OAAO;wBAAE,GAAG,IAAI;wBAAE,GAAG,OAAO;oBAAC,IAAI;YACtD;YAEA,OAAO;gBAAE;YAAM;QACjB,EAAE,OAAO,OAAO;YACd,OAAO;gBAAE,OAAO;YAAe;QACjC;IACF;IAEA,MAAM,eAAe;QACnB,IAAI,MAAM;YACR,MAAM,cAAc,KAAK,EAAE;QAC7B;IACF;IAEA,8FAA8F;IAC9F,MAAM,mBAAmB;QACvB,IAAI,MAAM;YACR,MAAM;QACR;IACF;IAEA,MAAM,QAAQ;QACZ;QACA;QACA;QACA;QACA;QACA;QACA;QACA;QACA;QACA;QACA;QACA;IACF;IAEA,qBAAO,6LAAC,YAAY,QAAQ;QAAC,OAAO;kBAAQ;;;;;;AAC9C;IApUa;KAAA","debugId":null}}]
}